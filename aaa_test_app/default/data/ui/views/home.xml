<dashboard>
<label>AAA test app home</label>

<row>
  <panel>
    <title>1) The dev docs that started this discussion</title>
    <html>
      <a href="https://dev.splunk.com/enterprise/docs/developapps/createapps/appanatomy/#Considerations-for-Python-code-files" target="_blank">https://dev.splunk.com/enterprise/docs/developapps/createapps/appanatomy/#Considerations-for-Python-code-files</a>

    </html>
  </panel>
</row>


<row>
  <panel>
    <title>2) What happens in scripttype=persist REST endpoints,  (a subset of restmap.conf)</title>
    <html>



      <ol>
        <li><a href="/splunkd/__raw/services/a_test_endpoint" target="_blank">open a_test_endpoint in a new tab</a>.</li>
        <li><a href="/splunkd/__raw/services/b_test_endpoint" target="_blank">open b_test_endpoint in a new tab</a></li>
      </ol>


      <p>If you restart and test one endpoint,  everything will work.   It's only when more than one scripttype=persist handler has run (after a restart) that the trouble starts.
      </p>


      <dl>
        <dt>import foo</dt>
        <dd>bad. first one wins</dd>

        <dt>doing clever sys.path.insert(1, THINGS)  before importing a non-unique thing like splunklib</dt>
        <dd>bad. does nothing. first one to import a thing called "splunklib" wins.</dd>

        <dt>import aaa_test_app.bar as bar</dt>
        <dd>good. even though "as bar" doesn't give it a unique name that's fine.  (slightly odd that splunk docs have people do py3-only "namespace packages" here. working theory - telephone game between eng and docs led to "make a package" becoming "make a subdirectory" and someone forgot about the __init__.py part)</dd>

        <dt>from inside a successfully imported namespace package, modifying sys.path to add its own directory and importing a secondary dependency, in this case a file baz.py from there).</dt>
        <dd>Python 2 on 7.3.8 - with the py3 namespace package import set up to failover to a normal package import, good. Works great.<br />
        Python 3 - with the namespace package import, bad. first one wins. WAT</dd>

      </dl>
    </html>
  </panel>
</row>


<row>
  <panel>
    <title>3) What happens in custom search commands (commands.conf), run on the SH</title>
    <table>
      <title>spoiler: nothing bad happens. see for yourself. Here are the outputs of atestcommand and btestcommand (from aaa_test_app and bbb_test_app) on different lines.</title>
      <search>
        <query>index=_internal | head 1 | atestcommand | eval side="A Side" | eval sys_path=mvjoin(sys_path,",") | stats count by side splunk_server splunk_home app whoami sys_path which_foo splunklib_version which_splunklib | eval sys.path=split(sys_path,",") | fields - sys_path
| append [search index=_internal | head 1 | eval side="B Side" | btestcommand | eval sys_path=mvjoin(sys_path,",") | stats count by side splunk_server splunk_home app whoami sys_path which_foo splunklib_version which_splunklib | eval sys.path=split(sys_path,",") | fields - sys_path]</query>
        <earliest>$earliest$</earliest>
        <latest>$latest$</latest>
      </search>
    </table>
  </panel>
</row>

<row>
  <panel>
    <title>4) What happens in custom search commands (commands.conf), run on the IDX tier?</title>
    <html>Needs a testcase.  However I have tested this manually not too long ago and I couldn't make anything bad happen</html>
  </panel>
</row>

<row>
  <panel>
    <title>5) modular inputs</title>
    <table>
      <title>spoiler - just a quick pass but so far it seems fine on 8.2.2 and 7.3.8. in other words sys.path in modinputs does not actually include all the /bin directories from all installed apps. (although several people said this was true, so it may very well have done so in older versions?)</title>
      <search>
        <query>index=main ( app=aaa_test_app OR app=bbb_test_app ) | dedup app | eval sys_path=split(sys_path,",") | table app script *_provenance sys_path | sort app</query>
      </search>

    </table>
  </panel>
</row>


</dashboard>